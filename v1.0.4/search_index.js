var documenterSearchIndex = {"docs":
[{"location":"#MySQL.jl-Documentation-1","page":"Home","title":"MySQL.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#High-level-interface-1","page":"Home","title":"High-level interface","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DBInterface.connect\nDBInterface.close!\nMySQL.escape\nDBInterface.execute\nDBInterface.prepare\nDBInterface.lastrowid","category":"page"},{"location":"#DBInterface.connect","page":"Home","title":"DBInterface.connect","text":"DBInterface.connect(MySQL.Connection, host::String, user::String, passwd::String; db::String=\"\", port::Integer=3306, unix_socket::String=API.MYSQL_DEFAULT_SOCKET, client_flag=API.CLIENT_MULTI_STATEMENTS, opts = Dict())\n\nConnect to a MySQL database with provided host, user, and passwd positional arguments. Supported keyword arguments include:\n\ndb::String=\"\": attach to a database by default\nport::Integer=3306: connect to the database on a specific port\nunix_socket::String: specifies the socket or named pipe that should be used\nfound_rows::Bool=false: Return the number of matched rows instead of number of changed rows\nno_schema::Bool=false: Forbids the use of database.tablename.column syntax and forces the SQL parser to generate an error.\ncompress::Bool=false: Use compression protocol\nignore_space::Bool=false: Allows spaces after function names. All function names will become reserved words.\nlocal_files::Bool=false: Allows LOAD DATA LOCAL statements\nmulti_statements::Bool=false: Allows the client to send multiple statements in one command. Statements will be divided by a semicolon.\nmulti_results::Bool=false: currently not supported by MySQL.jl\ninit_command=\"\": Command(s) which will be executed when connecting and reconnecting to the server.\nconnect_timeout::Integer: Connect timeout in seconds\nreconnect::Bool: Enable or disable automatic reconnect.\nread_timeout::Integer: Specifies the timeout in seconds for reading packets from the server.\nwrite_timeout::Integer: Specifies the timeout in seconds for reading packets from the server.\ndata_truncation::Bool: Enable or disable reporting data truncation errors for prepared statements\ncharset_dir::String: character set files directory\ncharset_name::String: Specify the default character set for the connection\nbind::String: Specify the network interface from which to connect to the database, like \"192.168.8.3\"\nmax_allowed_packet::Integer: The maximum packet length to send to or receive from server. The default is 16MB, the maximum 1GB.\nnet_buffer_length::Integer: The buffer size for TCP/IP and socket communication. Default is 16KB.\nnamed_pipe::Bool: For Windows operating systems only: Use named pipes for client/server communication.\nprotocol::MySQL.API.mysql_protocol_type: Specify the type of client/server protocol. Possible values are: MySQL.API.MYSQL_PROTOCOL_TCP, MySQL.API.MYSQL_PROTOCOL_SOCKET, MySQL.API.MYSQL_PROTOCOL_PIPE, MySQL.API.MYSQL_PROTOCOL_MEMORY.\nssl_key::String: Defines a path to a private key file to use for TLS. This option requires that you use the absolute path, not a relative path. If the key is protected with a passphrase, the passphrase needs to be specified with passphrase keyword argument.\npassphrase::String: Specify a passphrase for a passphrase-protected private key, as configured by the ssl_key keyword argument.\nssl_cert::String: Defines a path to the X509 certificate file to use for TLS. This option requires that you use the absolute path, not a relative path.\nssl_ca::String: Defines a path to a PEM file that should contain one or more X509 certificates for trusted Certificate Authorities (CAs) to use for TLS. This option requires that you use the absolute path, not a relative path.\nssl_capath::String: Defines a path to a directory that contains one or more PEM files that should each contain one X509 certificate for a trusted Certificate Authority (CA) to use for TLS. This option requires that you use the absolute path, not a relative path. The directory specified by this option needs to be run through the openssl rehash command.\nssl_cipher::String: Defines a list of permitted ciphers or cipher suites to use for TLS, like \"DHE-RSA-AES256-SHA\"\nssl_crl::String: Defines a path to a PEM file that should contain one or more revoked X509 certificates to use for TLS. This option requires that you use the absolute path, not a relative path.\nssl_crlpath::String: Defines a path to a directory that contains one or more PEM files that should each contain one revoked X509 certificate to use for TLS. This option requires that you use the absolute path, not a relative path. The directory specified by this option needs to be run through the openssl rehash command.\nssl_verify_server_cert::Bool: Enables (or disables) server certificate verification.\nssl_enforce::Bool: Whether to force TLS\ndefault_auth::String: Default authentication client-side plugin to use.\nconnection_handler::String: Specify the name of a connection handler plugin.\nplugin_dir::String: Specify the location of client plugins. The plugin directory can also be specified with the MARIADBPLUGINDIR environment variable.\nsecure_auth::Bool: Refuse to connect to the server if the server uses the mysqloldpassword authentication plugin. This mode is off by default, which is a difference in behavior compared to MySQL 5.6 and later, where it is on by default.\nserver_public_key::String: Specifies the name of the file which contains the RSA public key of the database server. The format of this file must be in PEM format. This option is used by the cachingsha2password client authentication plugin.\nread_default_file::Bool: only the default option files are read\noption_file::String: the argument is interpreted as a path to a custom option file, and only that option file is read.\nread_default_group::Bool: only the default option groups are read from specified option file(s)\noption_group::String: it is interpreted as a custom option group, and that custom option group is read in addition to the default option groups.\n\n\n\n\n\n","category":"function"},{"location":"#DBInterface.close!","page":"Home","title":"DBInterface.close!","text":"DBInterface.close!(conn::MySQL.Connection)\n\nClose a MySQL.Connection opened by DBInterface.connect.\n\n\n\n\n\nDBInterface.close!(cursor)\n\nClose a cursor. No more results will be available.\n\n\n\n\n\nDBInterface.close!(stmt)\n\nClose a prepared statement and free any underlying resources. The statement should not be used in any way afterwards.\n\n\n\n\n\nDBInterface.close!(cursor)\n\nClose a cursor. No more results will be available.\n\n\n\n\n\n","category":"function"},{"location":"#MySQL.escape","page":"Home","title":"MySQL.escape","text":"MySQL.escape(conn::MySQL.Connection, str::String) -> String\n\nEscapes a string using mysql_real_escape_string(), returns the escaped string.\n\n\n\n\n\n","category":"function"},{"location":"#DBInterface.execute","page":"Home","title":"DBInterface.execute","text":"DBInterface.execute(conn::MySQL.Connection, sql) => MySQL.TextCursor\n\nExecute the SQL sql statement with the database connection conn. Parameter binding is only supported via prepared statements, see ?DBInterface.prepare(conn, sql). Returns a Cursor object, which iterates resultset rows and satisfies the Tables.jl interface, meaning results can be sent to any valid sink function (DataFrame(cursor), CSV.write(\"results.csv\", cursor), etc.). Specifying mysql_store_result=false will avoid buffering the full resultset to the client after executing the query, which has memory use advantages, though ties up the database server since resultset rows must be fetched one at a time.\n\n\n\n\n\nDBInterface.execute(stmt, params; mysql_store_result=true) => MySQL.Cursor\n\nExecute a prepared statement, optionally passing params to be bound as parameters (like ? in the sql). Returns a Cursor object, which iterates resultset rows and satisfies the Tables.jl interface, meaning results can be sent to any valid sink function (DataFrame(cursor), CSV.write(\"results.csv\", cursor), etc.). Specifying mysql_store_result=false will avoid buffering the full resultset to the client after executing the query, which has memory use advantages, though ties up the database server since resultset rows must be fetched one at a time.\n\n\n\n\n\n","category":"function"},{"location":"#DBInterface.prepare","page":"Home","title":"DBInterface.prepare","text":"DBInterface.prepare(conn::MySQL.Connection, sql) => MySQL.Statement\n\nSend a sql SQL string to the database to be prepared, returning a MySQL.Statement object that can be passed to DBInterface.execute(stmt, args...) to be repeatedly executed, optionally passing args for parameters to be bound on each execution.\n\nNote that DBInterface.close!(stmt) should be called once statement executions are finished. Apart from freeing resources, it has been noted that too many unclosed statements and resultsets, used in conjunction with streaming queries (i.e. mysql_store_result=false) has led to occasional resultset corruption.\n\n\n\n\n\n","category":"function"},{"location":"#DBInterface.lastrowid","page":"Home","title":"DBInterface.lastrowid","text":"DBInterface.lastrowid(c::MySQL.TextCursor)\n\nReturn the last inserted row id.\n\n\n\n\n\nDBInterface.lastrowid(c::MySQL.Cursor)\n\nReturn the last inserted row id.\n\n\n\n\n\n","category":"function"}]
}
