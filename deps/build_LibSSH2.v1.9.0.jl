using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, "libssh2", :libssh2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/LibSSH2_jll.jl/releases/download/LibSSH2-v1.9.0+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/LibSSH2.v1.9.0.aarch64-linux-gnu.tar.gz", "e83bad8c959e0a9516dfca90e87ebfcb00acb8fb68c6d6468e0241dab6f0dbe0"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/LibSSH2.v1.9.0.aarch64-linux-musl.tar.gz", "9b3bbc7a6ebb96c9a778681f167318c0b18c98544bebfb3c1db5f2ce9f118754"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/LibSSH2.v1.9.0.arm-linux-gnueabihf.tar.gz", "6691f6e5e8e095ba0c68dd3968c64356097398cd1984ead094a9cd6256953821"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/LibSSH2.v1.9.0.arm-linux-musleabihf.tar.gz", "152d3a6aa8fe3b4093f6871f49f8ad91d35fe5985a674727b44ed05bb0c36b6e"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/LibSSH2.v1.9.0.i686-linux-gnu.tar.gz", "2450f45e82ee37ed95cb1838db58a59784c4147a001830525a4cb2d3f3261f7e"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/LibSSH2.v1.9.0.i686-linux-musl.tar.gz", "8a3c41b7bf58511b1989df7226cfd5d580e75dcfb5aab346135095b3e2e385a9"),
    Windows(:i686) => ("$bin_prefix/LibSSH2.v1.9.0.i686-w64-mingw32.tar.gz", "86030b7635ebd9c7debe3e7f2fb72b360b8607f6e4dce02e4c59548d283a38df"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/LibSSH2.v1.9.0.powerpc64le-linux-gnu.tar.gz", "3acd7b0d7a088216fc9755b351e71de731506ad5b76d0c5861e053d797363368"),
    MacOS(:x86_64) => ("$bin_prefix/LibSSH2.v1.9.0.x86_64-apple-darwin14.tar.gz", "b071fc09136638a9e6bfd7e6dde663f77a45fbd4614671d86a4172928d6b2dfb"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/LibSSH2.v1.9.0.x86_64-linux-gnu.tar.gz", "ffe52a373dffe47ca39af12549830c6dd7dd2096472ee8a324a31cecea3ef5ee"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/LibSSH2.v1.9.0.x86_64-linux-musl.tar.gz", "204dd622934b247297f03b3f7bce6ef1e3e0ded03a763bba6e881090ff02f05e"),
    FreeBSD(:x86_64) => ("$bin_prefix/LibSSH2.v1.9.0.x86_64-unknown-freebsd11.1.tar.gz", "87208caaa88030df82f4b8dbb993c0b95b625c1bf7a4ea38989528c64aec58fa"),
    Windows(:x86_64) => ("$bin_prefix/LibSSH2.v1.9.0.x86_64-w64-mingw32.tar.gz", "9ebbae40b047d0e55d3b0d3a2bb448373453797dfcb739e0c3845cecee89a561"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
