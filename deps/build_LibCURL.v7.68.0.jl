using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, "libcurl", :libcurl),
    ExecutableProduct(prefix, "curl", :curl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/LibCURL_jll.jl/releases/download/LibCURL-v7.68.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/LibCURL.v7.68.0.aarch64-linux-gnu.tar.gz", "582f65966c9f41a752740064d4e0054f28ee2ad8090ca32c943046c1dbeeab47"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/LibCURL.v7.68.0.aarch64-linux-musl.tar.gz", "e0506f0ff5e7fd20952982491532f94b2e1f0c5dba5f0a8513772214c01eda31"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/LibCURL.v7.68.0.arm-linux-gnueabihf.tar.gz", "8136e095607baa2eec8bd9d85eb6d40f33ae493ce733777788b5a0b52d466194"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/LibCURL.v7.68.0.arm-linux-musleabihf.tar.gz", "ecf890e42b6ea030ef34403fc23d4a2869c37c320264e9701f883355a6f4f8a6"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/LibCURL.v7.68.0.i686-linux-gnu.tar.gz", "3f83141b5eccc7e7c50fd9860ec23926f85869f5bbe7a8168da30b36f3147699"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/LibCURL.v7.68.0.i686-linux-musl.tar.gz", "2c3096307f4627b9b18121a0f4e803576bc36af88e776de04ef6d8d15b3efcde"),
    Windows(:i686) => ("$bin_prefix/LibCURL.v7.68.0.i686-w64-mingw32.tar.gz", "dfe3d9af1553741a99f48b47a125e3d94229c0f3925e7526117b31b4bf43c3ec"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/LibCURL.v7.68.0.powerpc64le-linux-gnu.tar.gz", "17a489e88d11505a1fd23f986c3bbd1da55fb722b7af35486b61310c072f10ad"),
    MacOS(:x86_64) => ("$bin_prefix/LibCURL.v7.68.0.x86_64-apple-darwin14.tar.gz", "a90a72339bd6fe1534210425ab09573127e03df0ac0aeda3a0140e7eca408caa"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/LibCURL.v7.68.0.x86_64-linux-gnu.tar.gz", "451d3673bc8bf44239432d74227d7e2ff4af6b555538be74336f1e83d40834f6"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/LibCURL.v7.68.0.x86_64-linux-musl.tar.gz", "fdd022079b4845105c43501982091763be2a99f22d40dbce8fa33f182f205cbc"),
    FreeBSD(:x86_64) => ("$bin_prefix/LibCURL.v7.68.0.x86_64-unknown-freebsd11.1.tar.gz", "dae602113893e34a2df1883ab7aed8ed9d861435bf91754e6203933aa9608cad"),
    Windows(:x86_64) => ("$bin_prefix/LibCURL.v7.68.0.x86_64-w64-mingw32.tar.gz", "5301462fd9aa8041acb43a095dc2a54405c2b920c4d80b4c82e26168e52c558b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
