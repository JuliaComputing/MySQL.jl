using BinaryProvider
# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(joinpath(@__DIR__, "usr"))
products = Product[
    LibraryProduct(prefix, "libmariadb", :libmariadb),
]
# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaDatabases/MySQLBuilder/releases/download/v0.16"
# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/MySQL.aarch64-linux-gnu.tar.gz", "d32d5a56e692cb90bcbc0ab955053171549e89e151811acc4ecf7152305055f0"),
    Linux(:armv7l, :glibc) => ("$bin_prefix/MySQL.arm-linux-gnueabihf.tar.gz", "546f739c39a35dadd20d7c508014d2cde231f2fe53156bb940f58b373057187b"),
    Linux(:i686, :glibc) => ("$bin_prefix/MySQL.i686-linux-gnu.tar.gz", "10fa8bd42cab034e000fa96517f71166402a161591249ba1b54cad402317663a"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/MySQL.powerpc64le-linux-gnu.tar.gz", "06a6d424188784ab4142e9d02fb63bad052a4c3d8b410b5c203ec65f36ac3d7b"),
    MacOS() => ("$bin_prefix/MySQL.x86_64-apple-darwin14.tar.gz", "3766a3749e1041bb173c5f656e4e8c0142ec68ca03ccedb4fc55ee3e5bd866e2"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/MySQL.x86_64-linux-gnu.tar.gz", "343286923b3baf307cc9791ce20eadf630c9252dabb2c4f849f726e92d466b3c"),

    Windows(:i686) => ("$bin_prefix/MySQL.i686-w64-mingw32.tar.gz", "3560a09b6d85f943ae6496ced03dea61fb807cfc1c26e2e6f0d2a734e88a4c84"),
    Windows(:x86_64) => ("$bin_prefix/MySQL.x86_64-w64-mingw32.tar.gz", "e86dc2a3a9d21a6cd338525b3f300b24a4730b999c1ee44d9fc9799d66bcdc01")
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
        try
            @show readdir(prefix.path)
            @show readdir(joinpath(prefix.path, "lib"))
            @show readdir(joinpath(prefix.path, "bin"))
        end
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end
end
# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
