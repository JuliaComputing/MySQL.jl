using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
    LibraryProduct(prefix, String["libmariadb"], :libmariadb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaDatabases/MySQLBuilder/releases/download/v0.19"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/MySQL.aarch64-linux-gnu.tar.gz", "f7e538f79220eb36c13685c5392a7659f5deaf0dba06b0653257251aa470db3a"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/MySQL.arm-linux-gnueabihf.tar.gz", "41d9be5b505633148da9b9d86d5bc8bb97b370e424d658b87256027b4dbea735"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/MySQL.i686-linux-gnu.tar.gz", "343bc456ebc98073eeca088d80be59c74b1efda799cba19f972f7f8746580c32"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/MySQL.powerpc64le-linux-gnu.tar.gz", "6286efc7c647f75edc794ddbfbb3233ebc389fde30f29f15f096c8849a597edd"),
    BinaryProvider.MacOS() => ("$bin_prefix/MySQL.x86_64-apple-darwin14.tar.gz", "1b3643c8f9965ace27ca2f901c0b4230bccc10128b52dde9585291a4c4747979"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/MySQL.x86_64-linux-gnu.tar.gz", "f33f4a2ddc3790fba2b478375fb19ef3ed97251fb02c85a635f119d67e3c6bfd"),

    BinaryProvider.Windows(:i686) => ("$bin_prefix/MySQL.i686-w64-mingw32.tar.gz", "2951da18a71ec67654b8771ec57b370efe2e2dc32516f151f977d8f7d725dea0"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/MySQL.x86_64-w64-mingw32.tar.gz", "725a5511e3a46432d9bd3c0590d73c310f55a01cbf4feb2ab5a2cdb539130954"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
