using BinaryProvider
# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
    # Instantiate products here, e.g.:
    LibraryProduct(prefix, "libmysql", :libmysql),
    # ExecutableProduct(prefix, "fooifier", :fooifier),
    # FileProduct(joinpath(libdir(prefix), "pkgconfig", "libfoo.pc"), :libfoo_pc),
]
# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaDatabases/MySQLBuilder/releases/download/v0.2"
# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/MySQL.i686-linux-gnu.tar.gz", "bf493bac77caf14013fe2aa0cc5ead07a13c7e1cb19b0dc183080450db5f169a"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/MySQL.x86_64-linux-gnu.tar.gz", "2cfcdef36fcecc16d75cbf04dc7925fec2083e274d5af099ac32f5507bb209c4"),
)
# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end
end
# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)